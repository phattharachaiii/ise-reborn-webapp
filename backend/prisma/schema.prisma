// ===== generator =====
generator client {
  provider = "prisma-client-js"
}

// ===== datasource =====
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ===== enums =====
enum Role {
  USER
  ADMIN
}

enum AccountStatus {
  ACTIVE
  TEMPSUSPEND
  SUSPENDED
}

enum Condition {
  NEW
  USED
}

enum Category {
  BOOKS
  CLOTHES
  GADGET
  FURNITURE
  SPORTS
  STATIONERY
  ELECTRONICS
  VEHICLES
  MUSIC
  OTHERS
}


enum OfferStatus {
  REQUESTED 
  ACCEPTED 
  REJECTED
  REOFFER 
  COMPLETED 
  CANCELLED 
}

enum OfferActor {
  BUYER
  SELLER
}


enum NotificationType {
  OFFER_REQUESTED
  OFFER_ACCEPTED
  OFFER_REJECTED
  OFFER_REOFFER
  OFFER_COMPLETED
}


enum ListingStatus {
  ACTIVE
  PENDING
  SOLD
  HIDDEN
}

// ===== models =====
model User {
  id           String  @id @default(cuid())
  email        String  @unique
  passwordHash String
  name         String? 
  avatarUrl    String?
  bio          String?

  orgDomain String? 
  studentId String? 

  role          Role          @default(USER)
  accountStatus AccountStatus @default(ACTIVE)
  emailVerified DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listings       Listing[]      @relation("UserListings")
  offersAsBuyer  Offer[]        @relation("OfferBuyer")
  offersAsSeller Offer[]        @relation("OfferSeller")
  notifications  Notification[]

  reportsAuthored Report[] @relation("ReportAuthor")
  reportsAgainst  Report[] @relation("ReportTarget")
}

model Listing {
  id       String @id @default(cuid())
  sellerId String
  seller   User   @relation("UserListings", fields: [sellerId], references: [id])

  title       String
  description String
  price       Int
  condition   Condition @default(USED)

  // ใช้ enum ListingStatus เพื่อรองรับ PENDING หลัง offer ถูก ACCEPT
  status ListingStatus @default(ACTIVE)

  imageUrls String[] @default([])
  category  Category @default(OTHERS)

  boostedUntil DateTime?
  boostedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offers       Offer[]
  Notification Notification[]

  @@index([status, createdAt])
  @@index([sellerId])
  @@index([category])
  @@index([boostedUntil])
}

model Offer {
  id String @id @default(cuid())

  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  buyerId String
  buyer   User   @relation("OfferBuyer", fields: [buyerId], references: [id], onDelete: Cascade)

  sellerId String
  seller   User   @relation("OfferSeller", fields: [sellerId], references: [id], onDelete: Cascade)

  status       OfferStatus @default(REQUESTED)
  meetPlace    String
  meetTime     DateTime
  note         String?
  rejectReason String?

  lastActor OfferActor @default(BUYER)

  qrToken     String?   @unique
  qrScannedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Notification Notification[]

  @@index([listingId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([status, updatedAt])
}

model Notification {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type NotificationType

  offerId String?
  offer   Offer?  @relation(fields: [offerId], references: [id], onDelete: SetNull)

  listingId String?
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: SetNull)

  title   String
  message String?

  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, isRead, createdAt])
  @@index([offerId])
  @@index([listingId])
}

model Report {
  id       String @id @default(cuid())
  authorId String
  author   User   @relation("ReportAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  targetUserId String
  targetUser   User   @relation("ReportTarget", fields: [targetUserId], references: [id], onDelete: Cascade)

  reason  String
  details String?

  createdAt DateTime @default(now())

  @@index([authorId])
  @@index([targetUserId, createdAt])
}
