// ===== generator =====
generator client {
  provider = "prisma-client-js"
}

// ===== datasource =====
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== enums =====
enum Role {
  USER
  ADMIN
}

enum AccountStatus {
  ACTIVE
  TEMPSUSPEND
  SUSPENDED
}

enum Condition {
  NEW
  USED
}

enum Category {
  BOOKS
  CLOTHES
  GADGET
  FURNITURE
  SPORTS
  STATIONERY
  ELECTRONICS
  VEHICLES
  MUSIC
  OTHERS
}

/**
 * üëâ ‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡πÇ‡∏ü‡∏•‡∏ß‡πå Offer
 */
enum OfferStatus {
  REQUESTED // ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏™‡∏ô‡∏≠
  ACCEPTED // ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö (‡∏°‡∏µ qrToken), Listing ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô PENDING (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ)
  REJECTED
  REOFFER // ‡∏ù‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏õ‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
  COMPLETED // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  CANCELLED // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
}

enum OfferActor {
  BUYER
  SELLER
}

/**
 * ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
 */
enum NotificationType {
  OFFER_REQUESTED
  OFFER_ACCEPTED
  OFFER_REJECTED
  OFFER_REOFFER
  OFFER_COMPLETED
}

/**
 * (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Pending ‡∏´‡∏•‡∏±‡∏á Accept
 */
enum ListingStatus {
  ACTIVE
  PENDING
  SOLD
  HIDDEN
}

// ===== models =====
model User {
  id           String  @id @default(cuid())
  email        String  @unique
  passwordHash String
  name         String? // ‡πÑ‡∏°‡πà unique ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
  avatarUrl    String?
  bio          String?

  // ‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏°‡∏´‡∏≤‡∏•‡∏±‡∏¢/‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
  orgDomain String? // ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡πÄ‡∏ä‡πà‡∏ô "kmitl.ac.th"
  studentId String? // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÑ‡∏°‡πà unique)

  role          Role          @default(USER)
  accountStatus AccountStatus @default(ACTIVE)
  emailVerified DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
  listings       Listing[]      @relation("UserListings")
  offersAsBuyer  Offer[]        @relation("OfferBuyer")
  offersAsSeller Offer[]        @relation("OfferSeller")
  notifications  Notification[]

  // ‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  reportsAuthored Report[] @relation("ReportAuthor")
  reportsAgainst  Report[] @relation("ReportTarget")
}

model Listing {
  id       String @id @default(cuid())
  sellerId String
  seller   User   @relation("UserListings", fields: [sellerId], references: [id])

  title       String
  description String
  price       Int
  condition   Condition @default(USED)

  // ‡πÉ‡∏ä‡πâ enum ListingStatus ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö PENDING ‡∏´‡∏•‡∏±‡∏á offer ‡∏ñ‡∏π‡∏Å ACCEPT
  status ListingStatus @default(ACTIVE)

  imageUrls String[] @default([])
  category  Category @default(OTHERS)

  boostedUntil DateTime?
  boostedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offers       Offer[]
  Notification Notification[]

  @@index([status, createdAt])
  @@index([sellerId])
  @@index([category])
  @@index([boostedUntil])
}

model Offer {
  id String @id @default(cuid())

  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  buyerId String
  buyer   User   @relation("OfferBuyer", fields: [buyerId], references: [id], onDelete: Cascade)

  sellerId String
  seller   User   @relation("OfferSeller", fields: [sellerId], references: [id], onDelete: Cascade)

  status       OfferStatus @default(REQUESTED)
  meetPlace    String
  meetTime     DateTime
  note         String?
  rejectReason String?

  lastActor OfferActor @default(BUYER)

  qrToken     String?   @unique
  qrScannedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Notification Notification[]

  @@index([listingId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([status, updatedAt])
}

model Notification {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type NotificationType

  offerId String?
  offer   Offer?  @relation(fields: [offerId], references: [id], onDelete: SetNull)

  listingId String?
  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: SetNull)

  title   String
  message String?

  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, isRead, createdAt])
  @@index([offerId])
  @@index([listingId])
}

model Report {
  id       String @id @default(cuid())
  authorId String
  author   User   @relation("ReportAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  targetUserId String
  targetUser   User   @relation("ReportTarget", fields: [targetUserId], references: [id], onDelete: Cascade)

  reason  String
  details String?

  createdAt DateTime @default(now())

  @@index([authorId])
  @@index([targetUserId, createdAt])
}
